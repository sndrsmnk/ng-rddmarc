#!/usr/bin/perl -w
use strict;
use DBI;
use XML::Simple;
use MIME::Parser;
use PerlIO::gzip;
use MIME::Words qw(:all);
use Time::HiRes qw(usleep);
use Filesys::Notify::Simple;
use Data::Dumper; $Data::Dumper::Sortkeys = 1;
use Socket qw(:addrinfo inet_ntop inet_pton AF_INET6 AF_INET);
use Getopt::Std; $main::VERSION = '0.999beta5'; $Getopt::Std::STANDARD_HELP_VERSION = 1;


use vars qw($opt_h $opt_s $opt_d $opt_r $opt_w $opt_n $opt_m $opt_c $opt_C
            $opt_U $opt_P $opt_N $opt_H $opt_p);
getopts('hsd:rwnmcC:U:P:N:H:p');


exit showHelp("help") if $opt_h;
exit showHelp("sql") if $opt_s;
exit showHelp("help", "No directory and/or file source(s) specified.") if not scalar(@ARGV);


exit dprint("Specified configuration file '$opt_C' is not valid: $!", 0)
    if (defined $opt_C and not -f $opt_C);
$opt_C = $ENV{HOME} . '/.ng-rddmarc.conf' if not defined $opt_C;
$opt_C = "/etc/ng-rddmarc/ng-rddmarc.conf" if not -f $opt_C;


# merge config, database-related command line opts always override config.
my $cmd = { 'U' => $opt_U, 'P' => $opt_P, 'N' => $opt_N, 'H' => $opt_H, 'p' => ($opt_p || 0) };
$opt_U = $opt_P = $opt_N = $opt_H = $opt_p = undef;


if (defined $opt_C and -f $opt_C) {
    dprint("Using configuration file '$opt_C'.", 1);

    open(FD, "<$opt_C") or die "Can't read $opt_C: $!\n";
    my $blob = "";
    { local $/ = undef; $blob = <FD>; close(FD); }
    eval $blob;
    exit dprint("The configuration file had syntax errors and failed to parse:\n$@", 0)
        if ($@);

    my $cfg = { 'U' => $opt_U, 'P' => $opt_P, 'N' => $opt_N, 'H' => $opt_H, 'p' => $opt_p };

    foreach my $ll (qw(U P N H p)) {
        if (defined $$cmd{$ll} and defined $$cfg{$ll}) {
            dprint("[dbconf] The configured value for 'opt_$ll' was overridden from commandline.", 10);
            next;

        }

        if (not defined $$cmd{$ll} and defined $$cfg{$ll}) {
            dprint("[dbconf] The configured value for 'opt_$ll' was used, as it was not specified on commandline.", 10);
            $$cmd{$ll} = $$cfg{$ll};

        }

    }

}


exit dprint("Database settings were not found in a configuration file, nor specified on the commandline.", 0)
    if (not defined $$cmd{'H'} or not defined $$cmd{'N'} or not defined $$cmd{'U'} or not defined $$cmd{'P'});


# set-up / test db env
dprint("[dbconf] connection is" . ($$cmd{p}?"":" not") . " persistent.", 10);
my $dbh = dbConnect();
$dbh->disconnect() if not $$cmd{'p'};


# heavy lifting
my ($files, $dirs) = findFiles(@ARGV);
exit showHelp("help", "No directories were specified to watch for activity.")
    if (not @$dirs and $opt_w);

processFile($_) foreach @$files;
undef $files;

if ($opt_w) {
    dprint("Waiting for new events in [".join(", ", @$dirs)."]", 0);
    my $watcher = Filesys::Notify::Simple->new($dirs);
    my $previous = ""; # events sometimes seem to fire twice
    while (1) { 
        $watcher->wait(sub{ 
            usleep(50000); # event fires on fast, grace sleep for io
            foreach (@_) {
                next if $previous eq $_->{path};
                $previous = $_->{path};
                processFile($_->{path});

            }

        });

    };

}


dprint("Done.", 0);
exit 0;


####
####
####


sub processFile {
    my ($arg) = @_;
    $arg =~ s#//+#/#g;

    return dprint("Can't read '$arg': $!", 0)
        if (not -f $arg or not -r $arg);

    dprint("Parsing $arg", 0);

    my $content = "";
    open (FILE, $arg) or die "Cannt open file '$arg': $!\n";
    $content .= $_ while <FILE>;
    close(FILE);

    my $xml = "";
    if ($content =~ m#^<\?xml#) {
        $xml = $content;

    } else {
        $xml = parseEML($content);

    }

    return dprint("'$arg': failed to parse properly. no xml part returned.", 0) if not defined $xml or $xml eq "" or $xml =~ m#^1#;
    return dprint("'$arg': xml does not look like xml.\n======\n$xml\n======\n", 0) if $xml !~ m#<\?xml#i;

    dprint("Fixed incorrect 'utf8' encoding to correct 'utf-8' encoding!", 4)
        if ($xml =~ s#encoding=['"]utf8['"]#encoding='utf-8'#);

    dprint("[xmldump] ======\n$xml\n[/xmldump] ======", 11);

    # if db not persistent, reconnect db
    $dbh = dbConnect() if (not $$cmd{'p'});

    my $xs = XML::Simple->new();
    my $ref = undef;
    eval {
        $ref = $xs->XMLin($xml);
    };
    if ($@) {
        dprint("Failed to parse this report:" . join("\n", $@));
        return;
    }
    my $from = $$ref{'report_metadata'}{'date_range'}{'begin'};
    my $to = $$ref{'report_metadata'}{'date_range'}{'end'};
    my $org = $$ref{'report_metadata'}{'org_name'};
    my $id = $$ref{'report_metadata'}{'report_id'};
    my $domain =  $$ref{'policy_published'}{'domain'};

    dprint("  Report from $org (id: $id) for $domain", 2);
    dprint("    Period: " . scalar(localtime($from)) . " - " . scalar(localtime($to)), 2);

    # see if already stored
    my ($xorg, $xid, $serial) = $dbh->selectrow_array(qq{SELECT org, reportid, serial FROM report WHERE reportid = ?}, undef, $id);
    if ($xorg && $opt_r) {
        dprint("  Replacing serial $serial, report id $xid", 0);
        $dbh->do(qq{DELETE from rptrecord WHERE serial = ?}, undef, $serial)
                or die "Cannot delete old records: " . $dbh->errstr;

    } elsif ($xorg) {
        dprint("  Already have $xorg\'s report id $xid as serial $serial, skipped", 0);
        $dbh->disconnect() unless $$cmd{'p'};
        return;

    }

    my $sql = qq{REPLACE INTO report (serial, mindate, maxdate, domain, org, reportid)
                    VALUES (?, FROM_UNIXTIME(?), FROM_UNIXTIME(?), ?, ?, ?)};

    $dbh->do($sql, undef, $serial, $from, $to, $domain, $org, $id) or die "cannot make report" . $dbh->errstr;
    $serial = $dbh->{'mysql_insertid'} || $dbh->{'insertid'} unless $xorg;

    my $record = $$ref{'record'};
    if (ref $record eq "HASH") {
        dprint("  Serial $serial, single record", 0);
        dorow($serial,$record);

    } elsif (ref $record eq "ARRAY") {
        dprint("  Serial $serial, multi record", 0);
        foreach my $row (@$record) {
            dorow($serial,$row);

        }

    } else {
        dprint("  Skipped records for serial $serial, report xml did not parse: " . ref($record), 0);

    }

    $dbh->disconnect() unless $$cmd{'p'};

    if ($opt_m) { # detect Maildir and move to cur/
        my ($path) = $arg =~ m#^(.*)/#;
        if (isMaildir($path)) {
            my $new_name = $arg;
            $new_name =~ s#/new/#/cur/#g;
            rename "$arg", "$new_name" or dprint("Can't rename '$arg' to '$new_name': $!", 0);
            dprint("[maildir] moved '$arg' to '$new_name'", 5);

        }

    }

}


sub parseEML {
    my ($content) = @_;

    my $parser = new MIME::Parser;
    $parser->output_dir("/tmp");

    my $ent    = $parser->parse_data($content);
    my $body   = $ent->bodyhandle;
    my $zip    = $body;
    my $mtype  = $ent->mime_type;
    my $isgzip = 0;

    # If multipart, look through the parts to find a ZIP
    if ($mtype =~ m#multipart/#i) {
        $zip = undef;
        my $npart = $ent->parts;
        for my $n (0..($npart-1)) {
            my $part = $ent->parts($n);
            if ($part->mime_type =~ m#application/(?:x\-)?gzip#i) {
                $zip = $part->bodyhandle;
                $isgzip = 1;
                last;

            } elsif ($part->mime_type =~ m#application/(?:zip|x-zip-compressed|octet-stream)#i) {
                $zip = $part->bodyhandle;
                $isgzip = 1 if $zip->path =~ m#\.gz$#;
                last;

            } else {
                dprint("Unsupported multipart mime_type skipped: '".$part->mime_type."'", 7);

            }

        }

    } elsif (lc($mtype) eq "application/gzip") {
        $isgzip = 1;

    } elsif (lc($mtype) eq "application/zip") {
        $isgzip = 0;

    } else {
        $ent->purge if $ent;
        $zip->purge if $zip;
        return dprint("Unknown mime type '$mtype'!", 0);

    }

    if (not $zip) {
        $ent->purge if $ent;
        return dprint("No (g)zip found in file content!", 0);

    }

    dprint("Report " . ($isgzip?"gzip":"zip") . " is in " . $zip->path, 2);

    if ($isgzip) {
        open(XML, "<:gzip", $zip->path) or return dprint("Cannot gunzip $zip->path", 0);

    } else {
        open(XML,"unzip -p " . $zip->path . " |") or return dprint("Cannot unzip $zip->path", 0);

    }

    my $ret = "";
    { local $/ = undef; $ret = <XML>; }
    close(XML);

    $ent->purge if $ent;
    $zip->purge if $zip;

    return $ret;
}


sub dbConnect {
    my $ret = DBI->connect("DBI:mysql:hostname=$$cmd{'H'}:database=$$cmd{'N'}:mysql_auto_reconnect=1", $$cmd{'U'}, $$cmd{'P'})
        or die "Cannot connect to database: $DBI::errstr\n";
    dprint("[dbconf] database connected.", 10);
    return $ret;
}


sub dorow {
    my ($serial, $recp) = @_;

    my %r     = %$recp;
    my $ip    = $r{'row'}->{'source_ip'};
    my $count = $r{'row'}->{'count'};
    my $disp  = $r{'row'}->{'policy_evaluated'}->{'disposition'};

    my ($dkimdomain, $dkimresult, $spf, $spfresult, $reason);

    
    my $rp = $r{'auth_results'}->{'dkim'};
    if (ref($rp) eq "HASH") {
        $dkimdomain = $rp->{'domain'};
        $dkimresult = $rp->{'result'};

    } else { # array, glom sigs together, report first result
        $dkimdomain = join '/', map { my $d = $_->{'domain'}; ref $d eq "HASH" ? "" : $d } @$rp;
        $dkimresult = $rp->[0]->{'result'};

    }

    # Report about message withouth DKIM signing info was received.
    $dkimdomain = '' if ref($dkimdomain) eq "HASH";


    $rp = $r{'auth_results'}->{'spf'};
    if (ref($rp) eq "HASH") {
        $spf = $rp->{'domain'};
        $spfresult = $rp->{'result'};

    } else { # array, glom domains together, report first result
        $spf = join '/', map { my $d = $_->{'domain'}; ref $d eq "HASH" ? "" : $d } @$rp;
        $spfresult = $rp->[0]->{'result'};

    }


    $rp = $r{'row'}->{'policy_evaluated'}->{'reason'};
    if (ref($rp) eq "HASH") {
        $reason = $rp->{'type'};

    } else {
        $reason = join '/',map { $_->{'type'} } @$rp;

    }


    dprint("    ip=$ip, count=$count, disp=$disp, r=$reason,", 2);
    dprint("    dkim=$dkimdomain/".($dkimresult||'').", spf=$spf/".($spfresult||''), 2);


    # figure out if it's IPv4 or IPv6
    my ($nip, $iptype, $ipval);
    if ($nip = inet_pton(AF_INET, $ip)) {
        $ipval = unpack "N", $nip;
        $iptype = "ip";

    } elsif ($nip = inet_pton(AF_INET6, $ip)) {
        $ipval = $nip;
        $iptype = "ip6";

    } else {
        dprint("    ??? mystery ip '$ip'", 0);
        $ipval = undef;

    }


    $dbh->do(qq{
            INSERT INTO rptrecord
                (serial, $iptype, rcount, disposition, reason,
                 dkimdomain, dkimresult, spfdomain, spfresult)
            VALUES
                (?, ?, ?, ?, ?,
                 ?, ?, ?, ?)}, undef, 
                
                $serial, $ipval, $count, $disp, $reason,
                $dkimdomain, $dkimresult, $spf, $spfresult

        ) or return dprint("Cannot insert record: $DBI::errstr", 0);

}


sub isMaildir {
    my ($path) = @_;
    $path =~ s#/+(?:cur|new|tmp)/*$##;
    return $path if (-d "$path/cur/" && -d "$path/new/" && -d "$path/tmp/");
    return 0;
}


sub findFiles {
    my (@args) = @_;

    my @dirs = ();
    my @files = ();

    foreach my $ent (@args) {
        $ent =~ s#/+$##;

        if (not -r $ent) {
            dprint("Can't read '$ent', skipping: $!", 0);
            next;

        }

        if (-f $ent) {
            push @files, $ent;
            next;

        }
         
        if (-d $ent) {
            my $maildir_base = "";

            if ($opt_m and $maildir_base = isMaildir($ent)) {
                dprint("Maildir detected in '$ent'", 3);
                push @dirs, $maildir_base . '/new/';

            } else {
                dprint("Not a Maildir or not using opt_m, treating as normal directory.", 4);
                push @dirs, $ent;

            }

            next if $opt_n; # don't recurse?

            my @lookpaths = ();
            if ($opt_m && $maildir_base) { # Maildir/ processing
                push @lookpaths, $maildir_base . "/new/";
                push @lookpaths, $maildir_base . "/cur/" if $opt_c;

            } else { # just a normal dir to process
                push @lookpaths, $ent;

            }

            foreach my $path (@lookpaths) { # just look for files in dirs, dont recurse deeper.
                opendir(DIR, $path) or die "'$path': $!";
                push @files, "$path/" . $_ foreach grep { !/^\./ && -f "$path/$_" } sort readdir DIR;
                closedir(DIR);

            }                    

        }

    }

    return \@files, \@dirs;
}


sub HELP_MESSAGE { showHelp(); } # Getopts
sub showHelp {
    my ($type, $msg) = @_;
    $type ||= "help";

    open (FD, "<".$0) or die "Can't read $0: $!\n";
    my $print = 0;
    while (my $ll = <FD>) {
        last if ($ll =~ /^#end$type/);
        print "$ll" if $print;
        $print = 1 if ($ll =~ /^#start$type/);

    }
    close(FD);

    if ($msg) {
        $msg =~ s/[\r\n]+$//;
        print "\n[!] Attention:\n$msg\n";

    }
    exit 0;
}


sub dprint {
    my ($msg, $lvl) = @_;
    $lvl = 1 if not defined $lvl;
    $msg =~ s/\n+$//g; $msg .= "\n";
    return print $msg if ($lvl == 0);
    return print $msg if ($opt_d and (($opt_d ==-1) or ($lvl <= $opt_d)));
}


__END__
#starthelp
© 2016, GPLv2, Sander Smeenk <ssmeenk@freshdot.net>
See attribution and license info in __END__ block.

$ ng-rddmarc [opts] <filenames ...>
$ ng-rddmarc [opts] <directories ...>

Options:
    -h       show this text
    -s       show MySQL create table statements

    -d nn    print debug info, nn = level,
             -1 = all, 10 = sensible, 11 = xml dumps

    -r       replace existing reports in database

    -w       block and monitor for new files in path(s) to process
    -n       do not initially scan files in path(s) specified
    -m       detect Maildir: process files and monitor in new/ dir,
             move completed to cur/ dir.
    -c       if path is Maildir, also process cur/ on startup

    -C xx/yy Use file 'xx/yy' as configuration file.
             Not specifying the -C option will try these in order:
               $HOME/.ng-rddmarc.conf
               /etc/ng-rddmarc/ng-rddmarc.conf

  The following 'conf:' lines can be stored in a configuration file:
    -U xxx   database user        conf: $opt_U = "username";
    -P xxx   database password    conf: $opt_P = "password";
    -N xxx   database name        conf: $opt_N = "dbname";
    -H xxx   database hostname    conf: $opt_H = "hostname";
    -p       enable persistent database connection
             defaults to connect for each report processed (0)
                                  conf: $opt_p = 1;
#endhelp

 
Database schema:

#startsql
CREATE TABLE report (
  serial int(10) unsigned NOT NULL AUTO_INCREMENT,
  mindate timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  maxdate timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',
  domain varchar(255) NOT NULL,
  org varchar(255) NOT NULL,
  reportid varchar(255) NOT NULL,
  PRIMARY KEY (serial),
  UNIQUE KEY domain (domain,reportid)
) charset=utf8;

CREATE TABLE rptrecord (
  serial int(10) unsigned NOT NULL,
  ip int(10) unsigned,
  ip6 binary(16),
  rcount int(10) unsigned NOT NULL,
  disposition enum('none','quarantine','reject'),
  reason varchar(255),
  dkimdomain varchar(255),
  dkimresult enum('none','pass','fail','neutral','policy','temperror','permerror'),
  spfdomain varchar(255),
  spfresult enum('none','neutral','pass','fail','softfail','temperror','permerror'),
  KEY serial (serial,ip),
  KEY serial6 (serial,ip6)
) charset=utf8;
#endsql


Original license:
Copyright 2012-2013, Taughannock Networks. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

Redistributions in binary form must reproduce the above copyright
notice, this list of conditions and the following disclaimer in the
documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
